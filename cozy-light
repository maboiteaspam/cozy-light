#!/usr/bin/env node

var http = require('http');
var https = require('https');
var url = require('url');
var fs = require('fs');
var fsExtra = require('fs-extra');
var pathExtra = require('path-extra');
var program = require('commander');
var npm = require('npm');
var request = require('request-json-light');
var express = require('express');
var morgan = require('morgan');
var bodyParser = require('body-parser')
var async = require('async');
var printit = require('printit');
var Pouchdb = require('pouchdb');
var httpProxy = require('http-proxy');
var pkg = require('./package.json');


// Helpers


var configHelpers = {

  /**
  * Add a new application to the configuration file. The configuration file is
  * written in JSON. It adds an entry to the apps field. Name, display name,
  * version and description are required.
  *
  * @param {String} app The app name as it's typed by the user (user/repo).
  * @param {String} manifest Manifest containing application fields.
  */
  addApp: function (app, manifest) {
    if(manifest.type === undefined) {
      manifest.type = "classic";
    }
    config.apps[app] = {
      name: manifest.name,
      displayName: manifest.displayName,
      version: manifest.version,
      description: manifest.description,
      type: manifest.type
    };
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  },

  /**
  * Remove given application from the configuration file. The configuration file
  * is written in JSON.
  *
  * @param {String} app The app name as it's typed by the user (user/repo).
  */
  removeApp: function (app) {
      delete config.apps[app];
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  },

  /**
  * Add a new plugin to the configuration file. The configuration file is
  * written in JSON. It adds an entry to the plugins field. Name, display name,
  * version and description are required.
  *
  * @param {String} plugin The plugin name as it's typed by the user (user/repo).
  * @param {String} manifest Manifest containing plugin fields.
  */
  addPlugin: function (plugin, manifest) {
    if(config.plugins === undefined) {
      config.plugins = {};
    };

    config.plugins[plugin] = {
      name: manifest.name,
      displayName: manifest.displayName,
      version: manifest.version,
      description: manifest.description
    };
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  },

  /**
  * Remove given plugin from the configuration file.
  *
  * @param {String} plugin The plugin name as it's typed by the user
  * (user/repo).
  */
  removePlugin: function (plugin, manifest) {
    delete config.plugins[plugin];
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  },

  /*
   * Go to the HOME folder ~/.cozy-light then start the command line tool.
   */
  createHome: function () {
    fsExtra.mkdirsSync(HOME);
    process.chdir(HOME);
  },
 
  /*
   * Create config file if it doesn't exist
   */
  createConfigFile: function () {
    var exists = fs.existsSync(CONFIG_PATH);
    if (!exists) {
      var config = { apps: {} };
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(config));
    };
  },

  /*
   * Copy given dependency to app folder to avoid apps to fetch and rebuild it
   * every time it's required as dependency.
   * Most dependencies are common and can be reused.
   */
  copyDependency: function (name) {
    var destPath = pathExtra.join(HOME, 'node_modules', name);
    var sourcePath = pathExtra.join(__dirname, 'node_modules', name);

    if(!fs.existsSync(destPath)) {
      fsExtra.copySync(sourcePath, destPath);
    };
  }
};


var npmHelpers = {

  /**
  * Fetch given app source and dependencies from NPM registry.
  *
  * Config file is ~/.cozy-light/.config
  *
  * @param {String} app App to fetch from NPM.
  * @param {Function} manifest Callback to run once work is done.
  */
  install: function (app, callback) {
    npm.load({}, function () {
      npm.commands.install(HOME, [app], callback);
    });
  },

  /**
  * Remove application source and dependencies using NPM lib.
  *
  * @param {String} app App to fetch from NPM.
  * @param {Function} manifest Callback to run once work is done.
   */
  uninstall: function (app, callback) {
    npm.load({}, function () {
      npm.commands.uninstall([app], callback);
    });
  }
};


var serverHelpers = {

  /*
   * Configure properly proxy: handle errors and websockets.
   *
   * @param {Object} server Express server.
   */
  initializeProxy: function (server) {

    proxy.on('error', function onProxyError(err, req, res) {
      console.log(err);
      res.send(err, 500);
    });

    server.on('upgrade', function onProxyUpgrade(req, socket, head) {

      function proxyWS(port) {
        proxy.ws(req, socket, head, {
          target: "ws://localhost:" + port,
          ws: true
        });
      };

      function fail(err) {
        if (err != null) {
          LOGGER.error(err);
        }
        LOGGER.error("Socket unauthorized");
        socket.end("HTTP/1.1 400 Connection Refused \r\n" + 
                   "Connection: close\r\n\r\n", 'ascii');
      };

      req.originalUrl = req.url;

      var publicOrPrivate = '';
      var slug = '';

      var urlParts = req.url.split('/');
      if(urlParts.length === 3) {
        publicOrPrivate = urlParts[1];
        slug = urlParts[2];
      }

      if (publicOrPrivate === 'public') {
        req.url = req.url.replace("/public/" + slug, '/public');
        proxyWS(routes[slug]);

      } else if (publicOrPrivate === 'apps') {
        req.url = req.url.replace("/apps/" + slug, '');
        proxyWS(routes[slug]);

      } else {
        proxyWS(process.env.DEFAULT_REDIRECT_PORT);
      }
    });

    return proxy;
  },

  /*
   * Create dashboard application server. 
   */
  createApplicationServer: function (callback) {
    app = express()
    app.use(morgan('combined'));
    app.use(express.static(pathExtra.join(__dirname, 'assets'),
            { maxAge: 86400000 }));

    var runPlugin = function (pluginName, cb) {

      plugin = loadedPlugins[pluginName];
      if (plugin.configureAppServer !== undefined) {
        LOGGER.info('Configuring plugin ' + pluginName + '...');
        config.pouchdb = Pouchdb;
        config.appPort = port;
        plugin.configureAppServer(app, config, routes, function logResult() {
          LOGGER.info('Plugin ' + pluginName + ' configured.');
          cb();
        });
      } else {
        cb();
      };
    };

    async.eachSeries(Object.keys(loadedPlugins), runPlugin, function (err) {
      if(err) { LOGGER.error(err); }

      app.use(bodyParser.urlencoded({ extended: false }))
      app.all('/status', controllers.status);
      app.post('/install', controllers.install);

      app.all('/apps/:name/*', controllers.proxyPrivate);
      app.all('/apps/:name*', controllers.proxyPrivate);

      app.all('/public/:name/*', controllers.proxyPublic);
      app.all('/public/:name*', controllers.proxyPublic);

      app.all('/*', controllers.automaticRedirect);

      callback(app);
    });
  },

  /*
   * Start given classic application as a new listening server.
   *
   * @param application The application to start.
   * @db The database to give as parameter to the application (they all share
   *     the same datastore).
   */
  startApplication: function (application, db, callback) {
    var name = application.name;
    var script = pathExtra.join(HOME, 'node_modules', name);
    var module = null;

    if (application.type === undefined || application.type === "classic") {
      try {
        module = require(script);
      } catch(err) {
        console.log(err);
      }

      if (module === null) {
        LOGGER.error("Can't load application " + name + ".");
        callback();
      } else if (module.start === undefined) {
        LOGGER.error("Can't start application " + name + ".");
        callback();
      } else {
        var options = {db: db, port: port, silent: true};
        module.start(options, function (app, server) {
          routes[name] = port;
          LOGGER.info('Application ' + name + ' is now running on port ' + 
                   port + '...');
          port = port + 1;
          callback();
        });
      };
    } else {
      callback();
    };
  },

  /*
   * Require and configure every plugins listed in the configuration file.
   */
  loadPlugins: function() {
    if(config.plugins !== undefined && typeof(config.plugins) === 'object') {
      Object.keys(config.plugins).forEach(function loadPlugin(pluginName) {
        try {
          var pluginConfig = config.plugins[pluginName];
          var pluginPath = pathExtra.join(
            HOME, 'node_modules', pluginConfig.name);
          var plugin = require(pluginPath);
          var options = {
            name: pluginConfig.name,
            displayName: pluginConfig.displayName,
            version: pluginConfig.version,
            description: pluginConfig.description,
            config_path: CONFIG_PATH,
            home: HOME,
            npmHelpers: npmHelpers,
            proxy: proxy
          };
          plugin.configure(options, config, program);

          loadedPlugins[pluginName] = plugin;
        } catch(err) {
          console.log(err);
          LOGGER.error('Plugin ' + pluginName + ' loading failed.');
        }
      });
    };
  },

  /*
   * Manage properly exit of the process when SIGINT signal is triggered.
   * It asks to every plugin to end properly.
   */
  exitHandler: function (err) {

    if(config.plugins !== undefined) {

      var exitPlugin = function (pluginName, cb) {
        var options = config.plugins[pluginName];
        try {
          plugin = require(pathExtra.join(HOME, 'node_modules', options.name));
          if (plugin.onExit !== undefined) {
            plugin.onExit(options, config, cb);
          } else {
            cb();
          }
        } catch(err) {
          console.log(err);
          LOGGER.error('Plugin ' + pluginName + 
                       ' loading failed for termination.');
          cb();
        }
      };

      var endProcess = function (err) {
        if (err) {
          LOGGER.error('Cozy light was not properly terminated.');
          process.exit(1);
        } else {
          LOGGER.info('Cozy light was properly terminated.');
          process.exit(0);
        };
      };

      async.eachSeries(Object.keys(config.plugins), exitPlugin, endProcess);

    } else {
      LOGGER.info('Cozy Light exited properly.');
      process.exit(0);
    }
  }
}


// Express app controllers

var controllers = {

  /*
   * Render status of running cozy-light.
   */
  status: function (req, res, next) {

    var config = require(CONFIG_PATH);

    var status = {
      memoryUsage:'',
      apps:[],
      plugins:[]
    };

    var memoryUsage = process.memoryUsage();
    status.memoryUsage = Math.ceil(memoryUsage.heapUsed / 1000000);

    Object.keys(config.apps).forEach(function (key) {
      var app = config.apps[key];
      status.apps.push({
        name:app.name,
        version:app.version
      });
    });

    Object.keys(loadedPlugins).forEach(function (pluginName) {
      var plugin = loadedPlugins[pluginName];
      var template = '';
      if (plugin.getTemplate !== undefined) {
        template = plugin.getTemplate(config);
      }
      status.plugins.push({
        name:pluginName,
        version:plugin.version,
        template:template
      });
    });
    res.send(status);
  },


  /*
   * Install app in running cozy-light instance.
   */
  install: function (req, res, next) {
    var app = req.body.app;
    var confirmed = parseInt(req.body.confirmed) || false;
    if( app ){
      var branch = 'master';
      if( app.match(/#([a-z_-]+)/) ){
        branch = app.match(/#([a-z_-]+)/)[1]
      }
      var pckg_url = 'https://raw.githubusercontent.com/'+app+'/'+branch+'/package.json';

      if( !confirmed ){
        https.get(pckg_url, function(res2) {
          res2.setEncoding('utf8');
          var body = '';
          res2.on('data', function (chunk) {
            body += chunk;
          });
          res2.on('end', function () {
            var pckg = {};
            try{
              pckg = JSON.parse(body);
              res.send({
                name:pckg.name,
                version:pckg.version
              });
            }catch(re){
              console.log(body)
              res.send("package.json incorrect");
            }
          });
        }).on('error', function(e) {
          res.send("package.json file not found");
        });
      }else{
        actions.installApp(app,function(){
          res.send("installed");
        });
      }
    }else{
      res.send(404);
    }
  },

  /*
   * Proxy requests targeting apps.
   */
  proxyPrivate: function (req, res, next) {
    var appName = req.params.name
    var port = routes[appName];
    req.url = req.url.substring(("/apps/" + appName).length);
    if (port !== null) {
      proxy.web(req, res, { target: "http://localhost:" + port });
    } else {
      res.send(404);
    }
  },
  
  /*
   * Proxy requests targeting apps public path.
   */
  proxyPublic: function (req, res, next) {
    var appName = req.params.name
    var port = routes[appName];
    req.url = "/public" + req.url.substring(("/public/" + appName).length);
    if (port !== null) {
      proxy.web(req, res, { target: "http://localhost:" + port });
    } else {
      res.send(404);
    }
  },

  /*
   * If request path don't match any existing route, it's redirected to 
   */
  automaticRedirect: function (req, res, next) {
    if (req.headers.referer !== undefined) {
      var referer = url.parse(req.headers.referer);
      var app = referer.path.split('/')[2];
      if (app !== undefined && app !== '') {
        var link = url.parse(encodeURI(req.url));
        link.path = link.path.split('?')[0];
        link.path = '/apps/' + app + link.path;
        link.pathname = link.path;
        if (link.path.indexOf(link.query) > 0) {
          link.query = '';
          link.search = '';
        };
        if (link.search === null) {
          link.search = '';
        }
        res.redirect(link.format(), 307);
      } else {
        res.redirect('/', 307);
      };
    } else {
        res.send(404);
    };
  }
}


// Actions

var actions = {
  
  /*
   * Apply plugin customatisation on server. Then get all installed app
   * modules. Expect that a start function is available, then run the app
   * server on given port. Ports are expected to be available.
   */
  start: function () {
    var db = new Pouchdb('cozy');

    var runApp = function (key, callback) {
      var application = config.apps[key];
      serverHelpers.startApplication(application, db, callback);
    };

    serverHelpers.createApplicationServer(function (app) {
      var startServer = function (err) {
        if(err) { LOGGER.error(err); }

        // Take port from config, use default one if not set.
        var port = DEFAULT_PORT;
        if(config.port !== undefined) {
          port = config.port;
        }

        // Set SSL configuration if certificates path are properly set.
        if (config.ssl !== undefined) {
          var options = {
            key: fs.readFileSync(config.ssl.key, 'utf8'),
            cert: fs.readFileSync(config.ssl.cert, 'utf8')
          };
          var server = https.createServer(options, app).listen(port);
        } else {
          var server = http.createServer(app).listen(port);
        }
        serverHelpers.initializeProxy(server);
        LOGGER.info(
          'Cozy Light Dashboard is running on port ' + port + '...');
      };

      async.eachSeries(Object.keys(config.apps), runApp, startServer);
    });
  },

  /*
  * App names correspond to Github repo. An app name is composed of a user name
  * and a repository name.
  * Installation starts by fetching the manifest from the repostiory
  * (package.json located at the root). Then it installs sources and
  * dependencies in the cozy-light folder.
  *
  * @param {String} app App to install (ex: cozy-labs/calendar).
  */
  installApp: function (app, callback) {
    var client = request.newClient( 'https://raw.githubusercontent.com/');
    var manifestUrl = app + '/master/package.json';

    LOGGER.info('Installing application ' + app + '...');
    client.get(manifestUrl, function (err, res, manifest) {
      if (err) {
        LOGGER.info(err);
        LOGGER.info('Cannot find given app manifest. Make sure it lives on ' +
                 'Github');
      } else {
        configHelpers.addApp(app, manifest);
        npmHelpers.install(app, function (err) {
          if (err) {
            LOGGER.raw(err);
            LOGGER.error(app + ' installation failed.');

          } else {
            LOGGER.info(app + ' installed. Enjoy!');
          };
          if (callback !== undefined && typeof(callback) === "function") { 
            callback(); 
          };
        });
      };
    });
  },

  /*
  * Remove app from config and its source from node module folder.
  *
  * @param {String} app App to uninstall.
  */
  uninstallApp: function (app){
    LOGGER.info('Uninstalling ' + app + '...');
    if(config.apps[app] === undefined) {
      LOGGER.error(app + ' is not installed.');
    } else {
      module = config.apps[app].name;
      npmHelpers.uninstall(module, function () {
        LOGGER.info(app + ' successfully uninstalled.');
        configHelpers.removeApp(app);
      });
    }
  },

  /*
  * Plugin names correspond to Github repo. A plugin name is composed of a user
  * name and a repository name.
  * Installation starts by fetching the manifest from the repostiory
  * (package.json located at the root). Then it installs sources and
  * dependencies in the cozy-light folder.
  *
  * @param {String} plugin Plugin to install (ex: cozy-labs/cozy-light-docker).
  */
  installPlugin: function (plugin){
    var client = request.newClient( 'https://raw.githubusercontent.com/');
    var manifestUrl = plugin + '/master/package.json';

    LOGGER.info('Installing plugin ' + plugin + '...');
    client.get(manifestUrl, function (err, res, manifest) {
      if (res.statusCode !== 200) {
        LOGGER.info(err);
        LOGGER.info('Cannot find given plugin manifest. Make sure it lives on '
          + 'Github');
        LOGGER.error(plugin + ' installation failed.');
      } else {
        configHelpers.addPlugin(plugin, manifest);
        npmHelpers.install(plugin, function (err) {
          if (err) {
            LOGGER.raw(err);
            LOGGER.error(plugin + ' installation failed.');

          } else {
            LOGGER.info(plugin + ' installed. Enjoy!');
          };
        });
      };
    });
  },


  /*
  * Remove plguin from config and its source from node module folder.
  *
  * @param {String} plugin Plugin to remove.
  */
  uninstallPlugin: function (plugin){
    LOGGER.info('Removing ' + plugin + '...');
    if(config.plugins[plugin] === undefined) {
      LOGGER.error(plugin + ' is not installed.');
    } else {
      module = config.plugins[plugin].name;
      npmHelpers.uninstall(plugin, function () {
        LOGGER.info(plugin + ' successfully uninstalled.');
        configHelpers.removePlugin(plugin);
      });
    }
  },

  /*
  * Display configuration file contents: apps configuration and user settings.
  */
  displayConfig: function () {
    console.log(fs.readFileSync(CONFIG_PATH).toString());
  }
};


// Constants

const LOGGER = printit({ prefix: 'Cozy Light' });
const HOME = pathExtra.join(pathExtra.homedir(), '.cozy-light');
const CONFIG_PATH = pathExtra.join(HOME, 'config.json');
const DEFAULT_PORT = 19104;


// Create config file and folders and prepare PouchDB dependency.

configHelpers.createHome();
configHelpers.createConfigFile();
configHelpers.copyDependency('pouchdb');


// "Global" variables

var routes = {}
var loadedPlugins = {}
var port = 18001;
var proxy = httpProxy.createProxyServer(/*{agent: new http.Agent()}*/);
var config = require(CONFIG_PATH);


// CLI

program
  .version(pkg.version)

program
  .command('start')
  .description('run remote setup commands')
  .action(actions.start);

program
  .command('install <app>')
  .description('Add app to current Cozy Light')
  .action(actions.installApp);

program
  .command('uninstall <app>')
  .description('Remove app from current Cozy Light')
  .action(actions.uninstallApp);

program
  .command('add-plugin <plugin>')
  .description('Add plugin to current Cozy Light')
  .action(actions.installPlugin);

program
  .command('remove-plugin <plugin>')
  .description('Remove plugin from current Cozy Light')
  .action(actions.uninstallPlugin);

program
  .command('display-config')
  .description('Display current config of Cozy Light')
  .action(actions.displayConfig);

program
  .command('*')
  .description('display help')
  .action(program.outputHelp);


// Process arguments

if(module.parent === null) {
  serverHelpers.loadPlugins();

  program.parse(process.argv);
};


// If argumernts doesn't match any of the one set, it displays help.

if (!process.argv.slice(2).length) {
  program.outputHelp();
};



// Manage errors

process.on('uncaughtException', function (err) {
  console.log(err);
});


// Manage termination

process.on('SIGINT', serverHelpers.exitHandler);


// Export module for testing purpose.

module.exports = {
  configHelpers: configHelpers,
  npmHelpers: npmHelpers,
  serverHelpers: serverHelpers,
  actions: actions,
  controllers: controllers
}
