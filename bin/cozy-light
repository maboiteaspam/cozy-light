#!/usr/bin/env node

var pathExtra = require('path-extra');
var program = require('commander');

var cozyLight = require('../lib/cozy-light');
var config = require('../lib/config');
var actions = cozyLight.actions;

var pkg = require('../package.json');

var runProgram = function() {

// Configure CLI

  program
    .version(pkg.version);

  program
    .option('-h, --home <home>',
    'home directory where Cozy Light runs (default: ~/.cozy-light)');

// trigger parse of home option.
  program.parse(process.argv);

// Init cozy light, let plugins add their own options / actions
  cozyLight.init(program);

// Initialize cozy cli actions

  program
    .command('start')
    .option('-p, --port <port>', 'port number on which Cozy Light will listen')
    .description('start Cozy Light server')
    .action(actions.start);

  program
    .command('install <app>')
    .description('Add app to current Cozy Light')
    .action(function(app){
      actions.installApp(app, cozyLight.exit)
    });

  program
    .command('uninstall <app>')
    .description('Remove app from current Cozy Light')
    .action(function(app){
      actions.uninstallApp(app, cozyLight.exit);
    });

  program
    .command('add-plugin <plugin>')
    .description('Add plugin to current Cozy Light')
    .action(function(plugin){
      actions.installPlugin(plugin, program, cozyLight.exit);
    });

  program
    .command('remove-plugin <plugin>')
    .description('Remove plugin from current Cozy Light')
    .action(function(plugin){
      actions.uninstallPlugin(plugin, cozyLight.exit);
    });

  program
    .command('display-config')
    .description('Display current config of Cozy Light')
    .action(function(){
      actions.displayConfig(program);
      cozyLight.exit();
    });

  program
    .command('enable <apporplugin>')
    .description('Enable given disabled app or plugin')
    .action(function(){
      actions.enable(program);
      cozyLight.exit();
    });

  program
    .command('disable <apporplugin>')
    .description('Disable given app or plugin')
    .action(function(){
      actions.disable(program);
      cozyLight.exit();
    });

  program
    .command('install-distro [distro]')
    .description(
    'Install given distro. If none is give, it displays the distro list')
    .action(function(){
      actions.installDistro(program, cozyLight.exit);
      cozyLight.exit();
    });


// Provides user help
  program
    .command('*')
    .description('display help')
    .action(function(){
      program.outputHelp();
      cozyLight.exit();
    });

// Run CLI

  program.parse(process.argv);

// If arguments doesn't match any of the one set, it displays help.

  if (!process.argv.slice(2).length) {
    program.outputHelp();
    cozyLight.exit();
  }

// Manage termination

  process.on('SIGINT', function(){
    cozyLight.stop(cozyLight.exit);
  });
};

// Much better!
var cluster = require('cluster');

if (cluster.isMaster) {
  var lastBugTime = new Date();
  var RestartTimeout;
// Manage termination
  process.on('SIGINT', function(){
    // must bind to prevent automatic garbage
  });

  cluster.fork();

  cluster.on('disconnect', function(worker) {

    if (worker.suicide) {
      console.error('worker suicided!');
      // restart only if bug occurred 10 sec ago and more
      // it helps to prevent a restart loop that could occurs during init sequence
      var diff = Math.abs(new Date() - lastBugTime);
      lastBugTime = new Date();

      if( !RestartTimeout && diff > 5 * 1000 ){
        RestartTimeout = setTimeout(function(){
          cluster.fork();
          RestartTimeout = null;
        }, 1000);
      } else {
        clearTimeout(RestartTimeout);
        // apply a timeout to ensure this will display at end to of the screen
        // otherwise both fork and master process speaks at same time
        setTimeout(function(){
          console.error('I won\'t restart');
          console.error('I detected something is going wrong in the startup sequence');
          console.error('Preventing me to start your system');
          console.error('Please report this issue');
        }, 2*1000);
      }
    } else {
      // just quit
    }
  });

} else {

  var domain = require('domain');
  var d = domain.create();
  d.on('error', function(err) {
    if (err) {
      cozyLight.logger.error('An exception is uncaught');
      cozyLight.logger.error(err.stack);
      cozyLight.logger.error(err.message);
    }

    try {
      d.run(function(){
        cozyLight.stop(function (){
          cluster.worker.kill();
        });
      });
    } catch (er2) {
      // oh well, not much we can do at this point.
      console.error(er2);
      console.error(er2.stack);
    }
  });
  d.run(runProgram);

}